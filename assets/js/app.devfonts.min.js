$((function(){
/*
@License: MIT License
@Module : Dev Collection developer-collection.js
@Author:Ouma Nyang
*/
class DeveloperCollection{constructor(){this.libfonts=[{"font-name":"D-DIN",style:"Sans-serif",class:"d-din",download_link:"lib/D-DIN"},{"font-name":"DIN",style:"Sans-serif",class:"din",download_link:"lib/DN-Regular"},{"font-name":"Figtree",style:"Sans-serif",class:"figtree",download_link:"lib/Figtree"},{"font-name":"Gilroy",style:"Sans-serif",class:"gilroy",download_link:"lib/Gilroy"},{"font-name":"Mandali",style:"Sans-serif",class:"mandali",download_link:"lib/Mandali"},{"font-name":"Outfit",style:"Sans-serif",class:"outfit",download_link:"lib/Outfit"},{"font-name":"Lexend",style:"Sans-serif",class:"lexend",download_link:"lib/Lexend"},{"font-name":"Lato",style:"Sans-serif",class:"lato",download_link:"lib/Lato"},{"font-name":"Metropolis",style:"Sans-serif",class:"metropolis",download_link:"lib/Metropolis"},{"font-name":"San-Francisco",style:"Sans-serif",class:"san-francisco",download_link:"lib/San-Francisco"},{"font-name":"Quicksand",style:"Sans-serif",class:"quicksand",download_link:"lib/Quicksand"},{"font-name":"Sen",style:"Sans-serif",class:"sen",download_link:"lib/Sen"},{"font-name":"Rubik",style:"Sans-serif",class:"rubik",download_link:"lib/Rubik"},{"font-name":"Ubuntu",style:"Sans-serif",class:"ubuntu",download_link:"lib/Ubuntu"},{"font-name":"FF-Mark",style:"Sans-serif",class:"ff-mark",download_link:"lib/FF-Mark"}]}generateFontCards(containerId){let fontsList=document.getElementById(containerId);this.libfonts.forEach((font=>{fontsList.innerHTML+=`\n                <div class="col-md-4 mt-2">\n                    <div class="card h-100">\n                        <div class="card-header">\n                            Font: ${font["font-name"]} <sup><i class="bi bi-patch-check-fill text-primary fa-10x fs-6"></i></sup> / ${font["style"]}\n                        </div>\n                        <div class="card-body ${font["class"]}">\n                            <h5 class="text-primary">Normal</h5>\n                            <p>The quick brown fox jumps over the lazy dog.</p>\n                            <h5 class="text-primary">Uppercase</h5>\n                            <p class="text-uppercase">The quick brown fox jumps over the lazy dog.</p>\n                            <h5 class="text-primary">Bold</h5>\n                            <p class="fw-bold">The quick brown fox jumps over the lazy dog.</p>\n                        </div>\n                        <div class="card-footer">\n                            <button class="btn btn-sm btn-outline-primary rounded-pill download-font" data-download="${font["download_link"]}" data-fontname="${font["font-name"]}">\n                                <i class="bi bi-cloud-download"></i> Download\n                            </button>\n                        </div>\n                    </div>\n                </div>\n            `}))}zipFonts(fontFolder,fontName,fileList){const zip=new JSZip;const filePromises=fileList.map((file=>fetch(`${fontFolder}/${file}`).then((response=>{if(!response.ok)throw new Error(`${file} not available`);return response.blob()})).then((blob=>{zip.file(file,blob)})).catch((()=>{console.warn(`Skipping unavailable file: ${file}`)}))));Promise.all(filePromises).then((()=>zip.generateAsync({type:"blob"}))).then((content=>{const a=document.createElement("a");const url=URL.createObjectURL(content);a.href=url;a.download=`${fontName}.zip`;a.click();URL.revokeObjectURL(url)})).catch((error=>console.error("Error generating zip:",error)))}}const devCollection=new DeveloperCollection;devCollection.generateFontCards("fonts-list");document.addEventListener("click",(function(event){if(event.target.classList.contains("download-font")){const fontFolder=event.target.getAttribute("data-download");const fontName=event.target.getAttribute("data-fontname");const filesToZip=[`${fontName}-Regular.ttf`,`${fontName}-Black.ttf`,`${fontName}-BlackItalic.ttf`,`${fontName}-Italic.ttf`];devCollection.zipFonts(fontFolder,fontName,filesToZip)}}))}));